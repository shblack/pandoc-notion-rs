Standard elements¶

These are the standard Pandoc elements, as described here. Consult the
repo for the latest updates.

Note

The attributes of every element object will be i) the parameters listed
below, plus ii) the attributes of Element. Example:

    >>> h = Str(text='something')
    >>> h.text
    'something'
    >>> hasattr(h, 'parent')
    True

Exception: the .content attribute only exists in elements that take
*args (so we can do Para().content but not Str().content).

Classes corresponding to Pandoc elements

Notation: - “ica” is shorthand for “identifier, classes, attributes”

class Doc(*args, **kwargs)[source]

    Pandoc document container.

    Besides the document, it includes the frontpage metadata and the
    desired output format. Filter functions can also add properties to
    it as means of global variables that can later be read by different
    calls.

    Parameters:

        - args (Block sequence) – top–level documents contained in the
          document

        - metadata (dict) – the frontpage metadata

        - format (str) – output format, such as ‘markdown’, ‘latex’ and
          ‘html’

        - api_version (tuple) – A tuple of three ints of the form (1,
          18, 0)

    Returns:

        Document with base class Element

    Base:

        Element

    Example:

        >>> meta = {'author':'John Doe'}
            >>> content = [Header(Str('Title')), Para(Str('Hello!'))]
            >>> doc = Doc(*content, metadata=meta, format='pdf')
            >>> doc.figure_count = 0 #  You can add attributes freely

    get_metadata([key, default, simple])

        Retrieve metadata with nested keys separated by dots.

        This is useful to avoid repeatedly checking if a dict exists, as
        the frontmatter might not have the keys that we expect.

        With builtin=True (the default), it will convert the results to
        built-in Python types, instead of MetaValue elements. EG:
        instead of returning a MetaBool it will return True|False.

        Parameters:

            - key (str) – string with the keys separated by a dot
              (key1.key2). Default is an empty string (which returns the
              entire metadata dict)

            - default – return value in case the key is not found
              (default is None)

            - builtin – If True, return built-in Python types (default
              is True)

        Example:

            >>> doc.metadata['format']['show-frame'] = True
                >>> # ...
                >>> # afterwards:
                >>> show_frame = doc.get_metadata('format.show-frame', False)
                >>> stata_path = doc.get_metadata('media.path.figures', '.')

------------------------------------------------------------------------

Classes corresponding to Pandoc elements

Notation: - “ica” is shorthand for “identifier, classes, attributes”

class BlockQuote(*args, **kwargs)[source]¶

    Block quote

    Parameters:

        args (Block) – sequence of blocks

    Base:

        Block

class BulletList(*args, **kwargs)[source]¶

    Bullet list (unordered list)

    Parameters:

        args (ListItem | list) – List item

    Base:

        Block

class Citation(*args, **kwargs)[source]¶

    A single citation to a single work

    Parameters:

        - id (str) – citation key (e.g. the BibTeX keyword)

        - mode (str) – how will the citation appear (‘NormalCitation’
          for the default style, ‘AuthorInText’ to exclude parenthesis,
          ‘SuppressAuthor’ to exclude the author’s name)

        - prefix ([Inline]) – Text before the citation reference

        - suffix ([Inline]) – Text after the citation reference

        - note_num (int) – (Not sure…)

        - hash (int) – (Not sure…)

    Base:

        Element

class Cite(*args, **kwargs)[source]¶

    Cite: set of citations with related text

    Parameters:

        - args (Inline) – contents of the cite (the raw text)

        - citations ([Citation]) – sequence of citations

    Base:

        Inline

class Code(*args, **kwargs)[source]¶

    Inline code (literal)

    Parameters:

        - text (str) – literal text (preformatted text, code, etc.)

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Inline

class CodeBlock(*args, **kwargs)[source]¶

    Code block (literal text) with optional attributes

    Parameters:

        - text (str) – literal text (preformatted text, code, etc.)

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Block

class Definition(*args, **kwargs)[source]¶

    The definition (description); used in a definition list. It can
    include code and all other block elements.

    Parameters:

        args (Block) – elements

    Base:

        Element

class DefinitionItem(*args, **kwargs)[source]¶

    Contains pairs of Term and Definitions (plural!)

    Each list item represents a pair of i) a term (a list of inlines)
    and ii) one or more definitions

    Parameters:

        - term ([Inline]) – Term of the definition (an inline holder)

        - definitions – List of definitions or descriptions (each a
          block holder)

    Base:

        Element

class DefinitionList(*args, **kwargs)[source]¶

    Definition list: list of definition items; basically (term,
    definition) tuples.

    Each list item represents a pair of i) a term (a list of inlines)
    and ii) one or more definitions (each a list of blocks)

    Example:

        >>> term1 = [Str('Spam')]
        >>> def1 = Definition(Para(Str('...emails')))
        >>> def2 = Definition(Para(Str('...meat')))
        >>> spam = DefinitionItem(term1, [def1, def2])
        >>>
        >>> term2 = [Str('Spanish'), Space, Str('Inquisition')]
        >>> def3 = Definition(Para(Str('church'), Space, Str('court')))
        >>> inquisition = DefinitionItem(term=term2, definitions=[def3])
        >>> definition_list = DefinitionList(spam, inquisition)

    Parameters:

        args (DefinitionItem) – Definition items (a term with
        definitions)

    Base:

        Block

class Div(*args, **kwargs)[source]¶

    Generic block container with attributes

    Parameters:

        - args (Block) – contents of the div

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Block

class Emph(*args, **kwargs)[source]¶

    Emphasized text

    Parameters:

        args (Inline) – elements that will be emphasized

    Base:

        Inline

class Figure(*args, **kwargs)[source]¶

    Standalone figure, with attributes, caption, and arbitrary block
    content

    Parameters:

        - args (Block) – contents of the figure block

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Block

    Example:

        >>> image = Image(Str("Description"), title='The Title',
                        url='example.png', attributes={'height':'256px'})
            >>> caption = Caption(Plain(Str('The'), Space, Str('Caption')))
            >>> figure = Figure(Plain(image), caption=caption, identifier='figure1')

class Header(*args, **kwargs)[source]¶

    

    Parameters:

        - args (Inline) – contents of the header

        - level (int) – level of the header (1 is the largest and 6 the
          smallest)

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Block

    Example:

        >>> title = [Str('Monty'), Space, Str('Python')]
            >>> header = Header(*title, level=2, identifier='toc')
            >>> header.level += 1

class HorizontalRule(*args, **kwargs)[source]¶

    Horizontal rule

    Base:

        Block

class Image(*args, **kwargs)[source]¶

    

    Parameters:

        - args (Inline) – text with the image description

        - url (str) – URL or path of the image

        - title (str) – Alt. title

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Inline

class LineBlock(*args, **kwargs)[source]¶

    Line block (sequence of lines)

    Parameters:

        args (LineItem | list) – Line item

    Base:

        Block

class LineBreak(*args, **kwargs)[source]¶

    Hard line break

    Base:

        Inline

class LineItem(*args, **kwargs)[source]¶

    Line item (contained in line blocks)

    Parameters:

        args (Inline) – Line item

    Base:

        Element

class Link(*args, **kwargs)[source]¶

    Hyperlink

    Parameters:

        - args (Inline) – text with the link description

        - url (str) – URL or path of the link

        - title (str) – Alt. title

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Inline

class ListItem(*args, **kwargs)[source]¶

    List item (contained in bullet lists and ordered lists)

    Parameters:

        args (Block) – List item

    Base:

        Element

class Math(*args, **kwargs)[source]¶

    TeX math (literal)

    Parameters:

        - text (str) – a string of raw text representing TeX math

        - format (str) – How the math will be typeset (‘DisplayMath’ or
          ‘InlineMath’)

    Base:

        Inline

class MetaBlocks(*args, **kwargs)[source]¶

    MetaBlocks: list of arbitrary blocks within the metadata

    Parameters:

        args (Block) – sequence of block elements

    Base:

        MetaValue

class MetaBool(*args, **kwargs)[source]¶

    Container for True/False metadata values

    Parameters:

        boolean (bool) – True/False value

    Base:

        MetaValue

class MetaInlines(*args, **kwargs)[source]¶

    MetaInlines: list of arbitrary inlines within the metadata

    Parameters:

        args (Inline) – sequence of inline elements

    Base:

        MetaValue

class MetaList(*args, **kwargs)[source]¶

    Metadata list container

    Parameters:

        args (MetaValue) – contents of a metadata list

    Base:

        MetaValue

class MetaMap(*args, **kwargs)[source]¶

    Metadata container for ordered dicts

    Parameters:

        - args (MetaValue) – (key, value) tuples

        - kwargs (MetaValue) – named arguments

    Base:

        MetaValue

    property content¶

        Map of MetaValue objects.

class MetaString(*args, **kwargs)[source]¶

    Text (a string)

    Parameters:

        text (str) – a string of unformatted text

    Base:

        MetaValue

class Note(*args, **kwargs)[source]¶

    Footnote or endnote

    Parameters:

        args (Block) – elements that are part of the note

    Base:

        Inline

class Null(*args, **kwargs)[source]¶

    Nothing

    Base:

        Block

class OrderedList(*args, **kwargs)[source]¶

    Ordered list (attributes and a list of items, each a list of blocks)

    Parameters:

        - args (ListItem | list) – List item

        - start (int) – Starting value of the list

        - style (str) – Style of the number delimiter (‘DefaultStyle’,
          ‘Example’, ‘Decimal’, ‘LowerRoman’, ‘UpperRoman’,
          ‘LowerAlpha’, ‘UpperAlpha’)

        - delimiter (str) – List number delimiter (‘DefaultDelim’,
          ‘Period’, ‘OneParen’, ‘TwoParens’)

    Base:

        Block

class Para(*args, **kwargs)[source]¶

    Paragraph

    Parameters:

        args (Inline) – contents of the paragraph

    Base:

        Block

    Example:

        >>> content = [Str('Some'), Space, Emph(Str('words.'))]
            >>> para1 = Para(*content)
            >>> para2 = Para(Str('More'), Space, Str('words.'))

class Plain(*args, **kwargs)[source]¶

    Plain text, not a paragraph

    Parameters:

        args (Inline) – contents of the plain block of text

    Base:

        Block

class Quoted(*args, **kwargs)[source]¶

    Quoted text

    Parameters:

        - args (Inline) – contents of the quote

        - quote_type (str) – either ‘SingleQuote’ or ‘DoubleQuote’

    Base:

        Inline

class RawBlock(*args, **kwargs)[source]¶

    Raw block

    Parameters:

        - text (str) – a string of raw text with another underlying
          format

        - format (str) – Format of the raw text (‘html’, ‘tex’, ‘latex’,
          ‘context’, etc.)

    Base:

        Block

class RawInline(*args, **kwargs)[source]¶

    Raw inline text

    Parameters:

        - text (str) – a string of raw text with another underlying
          format

        - format (str) – Format of the raw text (‘html’, ‘tex’, ‘latex’,
          ‘context’, etc.)

    Base:

        Inline

class SmallCaps(*args, **kwargs)[source]¶

    Small caps text (list of inlines)

    Parameters:

        args (Inline) – elements that will be set with small caps

    Base:

        Inline

class SoftBreak(*args, **kwargs)[source]¶

    Soft line break

    Base:

        Inline

class Space(*args, **kwargs)[source]¶

    Inter-word space

    Base:

        Inline

class Span(*args, **kwargs)[source]¶

    Generic block container with attributes

    Parameters:

        - args (Inline) – contents of the div

        - identifier (str) – element identifier (usually unique)

        - classes (list of str) – class names of the element

        - attributes (dict) – additional attributes

    Base:

        Inline

class Str(*args, **kwargs)[source]¶

    Text (a string)

    Parameters:

        text (str) – a string of unformatted text

    Base:

        Inline

class Strikeout(*args, **kwargs)[source]¶

    Strikeout text

    Parameters:

        args (Inline) – elements that will be striken out

    Base:

        Inline

class Strong(*args, **kwargs)[source]¶

    Strongly emphasized text

    Parameters:

        args (Inline) – elements that will be emphasized

    Base:

        Inline

class Subscript(*args, **kwargs)[source]¶

    Subscripted text (list of inlines)

    Parameters:

        args (Inline) – elements that will be set suberscript

    Base:

        Inline

class Superscript(*args, **kwargs)[source]¶

    Superscripted text (list of inlines)

    Parameters:

        args (Inline) – elements that will be set superscript

    Base:

        Inline

class Underline(*args, **kwargs)[source]¶

    Underlined text

    Parameters:

        args (Inline) – elements that will be underlined

    Base:

        Inline

