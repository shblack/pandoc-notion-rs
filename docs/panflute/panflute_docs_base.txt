Base elements¶

class Element(*args, **kwargs)[source]¶

    Base class of all Pandoc elements

    parent¶

        Element that contains the current one.

        Note: the .parent and related attributes are not implemented for
        metadata elements.

        Return type:

            Element | None

    location¶

        None unless the element is in a non–standard location of its
        parent, such as the .caption or .header attributes of a table.

        In those cases, .location will be equal to a string.

          

          rtype:

              str | None

    walk(action, doc=None, stop_if=None)[source]¶

        Walk through the element and all its children (sub-elements),
        applying the provided function action.

        A trivial example would be:

            from panflute import *

            def no_action(elem, doc):
                pass

            doc = Doc(Para(Str('a')))
            altered = doc.walk(no_action)

        Parameters:

            - action (function) – function that takes (element, doc) as
              arguments.

            - doc (Doc) – root document; used to access metadata, the
              output format (in .format, other elements, and other
              variables). Only use this variable if for some reason you
              don’t want to use the current document of an element.

            - stop_if (function, optional) – function that takes
              (element) as argument.

        Return type:

            Element | [] | None

    content¶

        Sequence of Element objects (usually either Block or Inline)
        that are “children” of the current element.

        Only available for elements that accept *args.

        Note: some elements have children in attributes other than
        content (such as Table that has children in the header and
        caption attributes).

    index¶

        

    ancestor(n)[source]¶

        Return the n-th ancestor. Note that
        elem.ancestor(1) == elem.parent

        Return type:

            Element | None

    offset(n)[source]¶

        Return a sibling element offset by n

        Return type:

            Element | None

    prev¶

        Return the previous sibling. Note that
        elem.offset(-1) == elem.prev

        Return type:

            Element | None

    next¶

        Return the next sibling. Note that elem.offset(1) == elem.next

        Return type:

            Element | None

    replace_keyword(keyword, replacement[, count])¶

        Walk through the element and its children and look for Str()
        objects that contains exactly the keyword. Then, replace it.

        Usually applied to an entire document (a Doc element)

        Note: If the replacement is a block, it cannot be put in place
        of a Str element. As a solution, the closest ancestor (e.g. the
        parent) will be replaced instead, but only if possible (if the
        parent only has one child).

        Example:

            >>> from panflute import *
            >>> p1 = Para(Str('Spam'), Space, Emph(Str('and'), Space, Str('eggs')))
            >>> p2 = Para(Str('eggs'))
            >>> p3 = Plain(Emph(Str('eggs')))
            >>> doc = Doc(p1, p2, p3)
            >>> doc.content
            ListContainer(Para(Str(Spam) Space Emph(Str(and) Space Str(eggs))) Para(Str(eggs)) Plain(Emph(Str(eggs))))
            >>> doc.replace_keyword('eggs', Str('ham'))
            >>> doc.content
            ListContainer(Para(Str(Spam) Space Emph(Str(and) Space Str(ham))) Para(Str(ham)) Plain(Emph(Str(ham))))
            >>> doc.replace_keyword(keyword='ham', replacement=Para(Str('spam')))
            >>> doc.content
            ListContainer(Para(Str(Spam) Space Emph(Str(and) Space Str(ham))) Para(Str(spam)) Para(Str(spam)))

        Parameters:

            - keyword (str) – string that will be searched (cannot have
              spaces!)

            - replacement (Element) – element that will be placed in
              turn of the Str element that contains the keyword.

            - count (int) – number of occurrences that will be replaced.
              If count is not given or is set to zero, all occurrences
              will be replaced.

    container¶

        Rarely used attribute that returns the ListContainer or
        DictContainer that contains the element (or returns None if no
        such container exist)

        Return type:

            ListContainer | DictContainer | None

------------------------------------------------------------------------

The following elements inherit from Element:

Base classes and methods of all Pandoc elements

class Block(*args, **kwargs)[source]¶

    Base class of all block elements

class Inline(*args, **kwargs)[source]¶

    Base class of all inline elements

class MetaValue(*args, **kwargs)[source]¶

    Base class of all metadata elements

Low-level classes¶

(Skip unless you want to understand the internals)

These containers keep track of the identity of the parent object, and
the attribute of the parent object that they correspond to.

class DictContainer(*args, oktypes=<class 'object'>, parent=None, **kwargs)[source]¶

    Wrapper around a dict, to track the elements’ parents. This class
    shouldn’t be instantiated directly by users, but by the elements
    that contain it.

    Parameters:

        - args – elements contained in the dict–like object

        - oktypes (type | tuple) – type or tuple of types that are
          allowed as items

        - parent (Element) – the parent element

class ListContainer(*args, oktypes=<class 'object'>, parent=None)[source]¶

    Wrapper around a list, to track the elements’ parents. This class
    shouldn’t be instantiated directly by users, but by the elements
    that contain it.

    Parameters:

        - args – elements contained in the list–like object

        - oktypes (type | tuple) – type or tuple of types that are
          allowed as items

        - parent (Element) – the parent element

        - container (str | None) – None, unless the element is not part
          of its .parent.content (this is the case for table headers for
          instance, which are not retrieved with table.content but with
          table.header)

    insert(i, v)[source]¶

        S.insert(index, value) – insert value before index

Note

To keep track of every element’s parent we do some class magic. Namely,
Element.content is not a list attribute but a property accessed via
getter and setters. Why?

    >>> e = Para(Str(Hello), Space, Str(World!))

This creates a Para element, which stores the three inline elements
(Str, Space and Str) inside an .content attribute. If we add .parent
attributes to these elements, there are three ways they can be made
obsolete:

1.  By replacing specific elements: e.content[0] = Str('Bye')

2.  By replacing the entire list: e.contents = other_items

We deal with the first problem with wrapping the list of items with a
ListContainer class of type collections.MutableSequence. This class
updates the .parent attribute to elements returned through __getitem__
calls.

For the second problem, we use setters and getters which update the
.parent attribute.

