Standard functions¶

  ------------------------------------------------ ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  run_filters(actions[, prepare, finalize, ...])   Receive a Pandoc document from the input stream (default is stdin), walk through it applying the functions in actions to each element, and write it back to the output stream (default is stdout).
  run_filter(action, *args, **kwargs)              Wrapper for run_filters()
  toJSONFilter(*args, **kwargs)                    Wrapper for run_filter(), which calls run_filters()
  toJSONFilters(*args, **kwargs)                   Wrapper for run_filters()
  load([input_stream])                             Load JSON-encoded document and return a Doc element.
  dump(doc[, output_stream])                       Dump a Doc object into a JSON-encoded text string.
  ------------------------------------------------ ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

See also

The walk() function has been replaced by the Element.walk() method of
each element. To walk through the entire document, do
altered = doc.walk().

I/O related functions

dump(doc, output_stream=None)[source]¶

    Dump a Doc object into a JSON-encoded text string.

    The output will be sent to sys.stdout unless an alternative text
    stream is given.

    To dump to sys.stdout just do:

        >>> import panflute as pf
        >>> doc = pf.Doc(Para(Str('a')))  # Create sample document
        >>> pf.dump(doc)

    To dump to file:

        >>> with open('some-document.json', 'w', encoding='utf-8') as f:
        >>>     pf.dump(doc, f)

    To dump to a string:

        >>> import io
        >>> with io.StringIO() as f:
        >>>     pf.dump(doc, f)
        >>>     contents = f.getvalue()

    Parameters:

        - doc (Doc) – document, usually created with load()

        - output_stream – text stream used as output (default is
          sys.stdout)

load(input_stream=None)[source]¶

    Load JSON-encoded document and return a Doc element.

    The JSON input will be read from sys.stdin unless an alternative
    text stream is given (a file handle).

    To load from a file, you can do:

        >>> import panflute as pf
        >>> with open('some-document.json', encoding='utf-8') as f:
        >>>     doc = pf.load(f)

    To load from a string, you can do:

        >>> import io
        >>> raw = '[{"unMeta":{}},
        [{"t":"Para","c":[{"t":"Str","c":"Hello!"}]}]]'
        >>> f = io.StringIO(raw)
        >>> doc = pf.load(f)

    Parameters:

        input_stream – text stream used as input (default is sys.stdin)

    Return type:

        Doc

run_filter(action, *args, **kwargs)[source]¶

    Wrapper for run_filters()

    Receive a Pandoc document from stdin, apply the action function to
    each element, and write it back to stdout.

    See run_filters()

run_filters(actions, prepare=None, finalize=None, input_stream=None, output_stream=None, doc=None, stop_if=None, **kwargs)[source]¶

    Receive a Pandoc document from the input stream (default is stdin),
    walk through it applying the functions in actions to each element,
    and write it back to the output stream (default is stdout).

    Notes:

    - It receives and writes the Pandoc documents as JSON–encoded
      strings; this is done through the load() and dump() functions.

    - It walks through the document once for every function in actions,
      so the actions are applied sequentially.

    - By default, it will read from stdin and write to stdout, but these
      can be modified.

    - It can also apply functions to the entire document at the
      beginning and end; this allows for global operations on the
      document.

    - If doc is a Doc instead of None, run_filters will return the
      document instead of writing it to the output stream.

    Parameters:

        - actions ([function]) – sequence of functions; each function
          takes (element, doc) as argument, so a valid header would be
          def action(elem, doc):

        - prepare (function) – function executed at the beginning; right
          after the document is received and parsed

        - finalize (function) – function executed at the end; right
          before the document is converted back to JSON and written to
          stdout.

        - input_stream – text stream used as input (default is
          sys.stdin)

        - output_stream – text stream used as output (default is
          sys.stdout)

        - doc (None | Doc) – None unless running panflute as a filter,
          in which case this will be a Doc element

        - stop_if (function, optional) – function that takes (element)
          as argument.

        - *kwargs – keyword arguments will be passed through to the
          action functions (so they can actually receive more than just
          two arguments (element and doc)

toJSONFilter(*args, **kwargs)[source]¶

    Wrapper for run_filter(), which calls run_filters()

    toJSONFilter(action, prepare=None, finalize=None, input_stream=None,
    output_stream=None, **kwargs) Receive a Pandoc document from stdin,
    apply the action function to each element, and write it back to
    stdout.

    See also toJSONFilters()

toJSONFilters(*args, **kwargs)[source]¶

    Wrapper for run_filters()

Note

The action functions have a few rules:

- They are called as action(element, doc) so they must accept at least
  two arguments.

- Additional arguments can be passed through the **kwargs** of
  toJSONFilter and toJSONFilters.

- They can return either an element, a list, or None.

- If they return None, the document will keep the same element as before
  (although it might have been modified).

- If they return another element, it will take the place of the received
  element.

- If they return [] (an empty list), they will be deleted from the
  document. Note that you can delete a row from a table or an item from
  a list, but you cannot delete the caption from a table (you can make
  it empty though).

- If the received element is a block or inline element, they may return
  a list of elements of the same base class, which will take the place
  of the received element.

